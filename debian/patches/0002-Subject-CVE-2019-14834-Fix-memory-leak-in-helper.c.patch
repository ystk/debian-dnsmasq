From: Simon Kelley <simon@thekelleys.org.uk>
Date: Wed, 14 Aug 2019 19:44:50 +0000
Subject: CVE-2019-14834 Fix memory leak in helper.c
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

X-Git-Tag: v2.81rc1~78
X-Git-Url: https://thekelleys.org.uk/gitweb/?p=dnsmasq.git;a=commitdiff_plain;h=69bc94779c2f035a9fffdb5327a54c3aeca73ed5

Fix memory leak in helper.c

Thanks to Xu Mingjie <xumingjie1995@outlook.com> for spotting this.

origin: https://thekelleys.org.uk/gitweb/?p=dnsmasq.git;a=commitdiff_plain;h=69bc94779c2f035a9fffdb5327a54c3aeca73ed5
bug-redhat: https://bugzilla.redhat.com/show_bug.cgi?id=1764425
bug-debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=948373
bug-debian-security: https://security-tracker.debian.org/tracker/CVE-2019-14834
Signed-off-by: Bastien Roucari√®s <rouca@debian.org>
---
 src/helper.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/helper.c b/src/helper.c
index 4be53c3..77d2f77 100644
--- a/src/helper.c
+++ b/src/helper.c
@@ -82,7 +82,8 @@ int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
   pid_t pid;
   int i, pipefd[2];
   struct sigaction sigact;
-
+  unsigned char *alloc_buff = NULL;
+  
   /* create the pipe through which the main program sends us commands,
      then fork our process. */
   if (pipe(pipefd) == -1 || !fix_fd(pipefd[1]) || (pid = fork()) == -1)
@@ -187,10 +188,15 @@ int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
       struct script_data data;
       char *p, *action_str, *hostname = NULL, *domain = NULL;
       unsigned char *buf = (unsigned char *)daemon->namebuff;
-      unsigned char *end, *extradata, *alloc_buff = NULL;
+      unsigned char *end, *extradata;
       int is6, err = 0;
 
-      free(alloc_buff);
+      /* Free rarely-allocated memory from previous iteration. */
+      if (alloc_buff)
+	{
+	  free(alloc_buff);
+	  alloc_buff = NULL;
+	}
       
       /* we read zero bytes when pipe closed: this is our signal to exit */ 
       if (!read_write(pipefd[0], (unsigned char *)&data, sizeof(data), 1))
